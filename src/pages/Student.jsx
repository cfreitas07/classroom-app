import React, { useState, useEffect } from 'react';
import { db } from '../firebase';
import { Link, useNavigate } from 'react-router-dom';
import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  doc,
  getDoc,
  Timestamp
} from 'firebase/firestore';
import { FaGlobe, FaUserGraduate, FaCode, FaQuestionCircle } from 'react-icons/fa';
import logo from '../images/logo transparent.png';

function Student() {
  const [language, setLanguage] = useState('en');
  const [enrollmentCode, setEnrollmentCode] = useState('');
  const [studentCode, setStudentCode] = useState('');
  const [attendanceCode, setAttendanceCode] = useState('');
  const [statusMessage, setStatusMessage] = useState('');
  const [classId, setClassId] = useState(null);
  const [classData, setClassData] = useState(null);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [countdown, setCountdown] = useState(5);
  const [showPrivacyNotice, setShowPrivacyNotice] = useState(false);
  const [showAttendanceInfo, setShowAttendanceInfo] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);
  const [showEnrollmentTooltip, setShowEnrollmentTooltip] = useState(false);
  const [showAttendanceTooltip, setShowAttendanceTooltip] = useState(false);
  const navigate = useNavigate();

  const translations = {
    en: {
      title: 'Student Check-In',
      step1: 'Step 1: Enter Class Enrollment Code',
      step2: 'Step 2: Enter Your Details',
      enrollmentPlaceholder: 'Enter the code provided by your instructor',
      joinClass: 'Join Class',
      studentIdentifier: 'üë§ Student Identifier',
      privacyNotice: '‚ö†Ô∏è Privacy Notice',
      privacyText: 'Please contact your instructor to confirm what identifier you should use. For privacy reasons, do not enter your full name. Your instructor will provide guidance on how to identify yourself in the system.',
      studentPlaceholder: 'Enter your student identifier',
      attendanceCode: 'üî¢ Attendance Code',
      attendancePlaceholder: 'Enter the 3-digit code from the screen',
      submitAttendance: 'Submit Attendance',
      successTitle: 'Attendance Submitted!',
      redirecting: 'Redirecting to home page in',
      seconds: 'seconds...',
      errors: {
        wait: 'Please wait',
        seconds: 'seconds before submitting again.',
        classNotFound: 'Class not found. Check the enrollment code.',
        classFound: 'Class found. Now enter your student code and today\'s attendance code.',
        joinFirst: 'Please join a class first.',
        enterCode: 'Please enter your student code',
        invalidCode: 'Invalid attendance code.',
        expiredCode: 'Attendance code has expired.',
        error: 'Error:'
      },
      backToHome: "Back to Home",
      enterCode: "Enter Class Code",
      studentName: "Student Identifier",
      studentNameTooltip: "Enter how you want to be identified in class. Examples:\n‚Ä¢ First name + Last initial (e.g., John D.)\n‚Ä¢ First name + Last name\n‚Ä¢ Student ID number\n‚Ä¢ Any identifier that helps your instructor recognize you",
      submit: "Submit",
      success: "Check-in Successful!",
      error: "Error",
      invalidCode: "Invalid code. Please try again.",
      alreadyCheckedIn: "You have already checked in for this class.",
      classNotFound: "Class not found. Please verify the code.",
      expiredCode: "This code has expired. Please contact your instructor.",
      enterValidCode: "Please enter a valid code",
      enterName: "Please enter your identifier",
      processing: "Processing...",
      checkInHistory: "Check-in History",
      noHistory: "No check-in history available",
      classCode: "Class Code",
      checkInTime: "Check-in Time",
      status: "Status",
      enrollmentTooltip: "This is your class's permanent enrollment code. It will ALWAYS be the same for this specific class section. Use this code to join the class for the first time.",
      attendanceCodeTooltip: "This is a unique 3-digit code generated at the start of each class. It is only valid for 3 minutes. Your instructor will display this code at the beginning of class."
    },
    pt: {
      title: 'Registro de Presen√ßa',
      step1: 'Passo 1: Digite o C√≥digo da Turma',
      step2: 'Passo 2: Digite Seus Detalhes',
      enrollmentPlaceholder: 'Digite o c√≥digo fornecido pelo seu instrutor',
      joinClass: 'Entrar na Turma',
      studentIdentifier: 'üë§ Identificador do Estudante',
      privacyNotice: '‚ö†Ô∏è Aviso de Privacidade',
      privacyText: 'Entre em contato com seu instrutor para confirmar qual identificador voc√™ deve usar. Por quest√µes de privacidade, n√£o digite seu nome completo. Seu instrutor fornecer√° orienta√ß√µes sobre como se identificar no sistema.',
      studentPlaceholder: 'Digite seu identificador',
      attendanceCode: 'üî¢ C√≥digo de Presen√ßa',
      attendancePlaceholder: 'Digite o c√≥digo de 3 d√≠gitos da tela',
      submitAttendance: 'Enviar Presen√ßa',
      successTitle: 'Presen√ßa Registrada!',
      redirecting: 'Redirecionando para a p√°gina inicial em',
      seconds: 'segundos...',
      errors: {
        wait: 'Por favor, aguarde',
        seconds: 'segundos antes de enviar novamente.',
        classNotFound: 'Turma n√£o encontrada. Verifique o c√≥digo de matr√≠cula.',
        classFound: 'Turma encontrada. Agora digite seu c√≥digo de estudante e o c√≥digo de presen√ßa de hoje.',
        joinFirst: 'Por favor, entre em uma turma primeiro.',
        enterCode: 'Por favor, digite seu c√≥digo de estudante',
        invalidCode: 'C√≥digo de presen√ßa inv√°lido.',
        expiredCode: 'C√≥digo de presen√ßa expirado.',
        error: 'Erro:'
      },
      backToHome: "Voltar para Home",
      enterCode: "Digite o C√≥digo da Aula",
      studentName: "Identificador do Estudante",
      studentNameTooltip: "Digite como voc√™ quer ser identificado na aula. Exemplos:\n‚Ä¢ Primeiro nome + Inicial do sobrenome (ex: Jo√£o S.)\n‚Ä¢ Primeiro nome + Sobrenome\n‚Ä¢ N√∫mero de matr√≠cula\n‚Ä¢ Qualquer identificador que ajude seu instrutor a reconhec√™-lo",
      submit: "Enviar",
      success: "Check-in Realizado com Sucesso!",
      error: "Erro",
      invalidCode: "C√≥digo inv√°lido. Por favor, tente novamente.",
      alreadyCheckedIn: "Voc√™ j√° realizou check-in para esta aula.",
      classNotFound: "Aula n√£o encontrada. Por favor, verifique o c√≥digo.",
      expiredCode: "Este c√≥digo expirou. Por favor, contate seu instrutor.",
      enterValidCode: "Por favor, digite um c√≥digo v√°lido",
      enterName: "Por favor, digite seu identificador",
      processing: "Processando...",
      checkInHistory: "Hist√≥rico de Check-in",
      noHistory: "Nenhum hist√≥rico de check-in dispon√≠vel",
      classCode: "C√≥digo da Aula",
      checkInTime: "Hor√°rio do Check-in",
      status: "Status",
      enrollmentTooltip: "Este √© o c√≥digo permanente da sua turma. Ele SEMPRE ser√° o mesmo para esta se√ß√£o espec√≠fica da turma. Use este c√≥digo para entrar na turma pela primeira vez.",
      attendanceCodeTooltip: "Este √© um c√≥digo √∫nico de 3 d√≠gitos gerado no in√≠cio de cada aula. √â v√°lido apenas por 3 minutos. Seu instrutor exibir√° este c√≥digo no in√≠cio da aula."
    },
    es: {
      title: 'Registro de Asistencia',
      step1: 'Paso 1: Ingrese el C√≥digo de Matr√≠cula',
      step2: 'Paso 2: Ingrese Sus Detalles',
      enrollmentPlaceholder: 'Ingrese el c√≥digo proporcionado por su instructor',
      joinClass: 'Unirse a la Clase',
      studentIdentifier: 'üë§ Identificador del Estudiante',
      privacyNotice: '‚ö†Ô∏è Aviso de Privacidad',
      privacyText: 'Contacte a su instructor para confirmar qu√© identificador debe usar. Por razones de privacidad, no ingrese su nombre completo. Su instructor le proporcionar√° orientaci√≥n sobre c√≥mo identificarse en el sistema.',
      studentPlaceholder: 'Ingrese su identificador',
      attendanceCode: 'üî¢ C√≥digo de Asistencia',
      attendancePlaceholder: 'Ingrese el c√≥digo de 3 d√≠gitos de la pantalla',
      submitAttendance: 'Enviar Asistencia',
      successTitle: '¬°Asistencia Registrada!',
      redirecting: 'Redirigiendo a la p√°gina principal en',
      seconds: 'segundos...',
      errors: {
        wait: 'Por favor, espere',
        seconds: 'segundos antes de enviar nuevamente.',
        classNotFound: 'Clase no encontrada. Verifique el c√≥digo de matr√≠cula.',
        classFound: 'Clase encontrada. Ahora ingrese su c√≥digo de estudiante y el c√≥digo de asistencia de hoy.',
        joinFirst: 'Por favor, √∫nase a una clase primero.',
        enterCode: 'Por favor, ingrese su c√≥digo de estudiante',
        invalidCode: 'C√≥digo de asistencia inv√°lido.',
        expiredCode: 'C√≥digo de asistencia expirado.',
        error: 'Error:'
      },
      backToHome: "Volver al Inicio",
      enterCode: "Ingrese el C√≥digo de la Clase",
      studentName: "Identificador del Estudiante",
      studentNameTooltip: "Ingrese c√≥mo quiere ser identificado en la clase. Ejemplos:\n‚Ä¢ Nombre + Inicial del apellido (ej: Juan P.)\n‚Ä¢ Nombre + Apellido\n‚Ä¢ N√∫mero de estudiante\n‚Ä¢ Cualquier identificador que ayude a su instructor a reconocerlo",
      submit: "Enviar",
      success: "¬°Registro Exitoso!",
      error: "Error",
      invalidCode: "C√≥digo inv√°lido. Por favor, intente nuevamente.",
      alreadyCheckedIn: "Ya se ha registrado para esta clase.",
      classNotFound: "Clase no encontrada. Por favor, verifique el c√≥digo.",
      expiredCode: "Este c√≥digo ha expirado. Por favor, contacte a su instructor.",
      enterValidCode: "Por favor, ingrese un c√≥digo v√°lido",
      enterName: "Por favor, ingrese su identificador",
      processing: "Procesando...",
      checkInHistory: "Historial de Registro",
      noHistory: "No hay historial de registro disponible",
      classCode: "C√≥digo de la Clase",
      checkInTime: "Hora de Registro",
      status: "Estado",
      enrollmentTooltip: "Este es el c√≥digo permanente de matr√≠cula de su clase. SIEMPRE ser√° el mismo para esta secci√≥n espec√≠fica de la clase. Use este c√≥digo para unirse a la clase por primera vez.",
      attendanceCodeTooltip: "Este es un c√≥digo √∫nico de 3 d√≠gitos generado al inicio de cada clase. Es v√°lido solo por 3 minutos. Su instructor mostrar√° este c√≥digo al inicio de la clase."
    }
  };

  // Check for recent submission on component mount
  useEffect(() => {
    const lastSubmission = localStorage.getItem('lastAttendanceSubmission');
    if (lastSubmission) {
      const submissionTime = parseInt(lastSubmission);
      const now = Date.now();
      const timeDiff = now - submissionTime;
      
      if (timeDiff < 180000) { // 3 minutes in milliseconds
        const remainingTime = Math.ceil((180000 - timeDiff) / 1000);
        setStatusMessage(`‚ùå Please wait ${remainingTime} seconds before submitting again.`);
      }
    }
  }, []);

  // Step 1: Join a class by code
  const handleJoinClass = async () => {
    setStatusMessage('');
    
    // Check for recent submission
    const lastSubmission = localStorage.getItem('lastAttendanceSubmission');
    if (lastSubmission) {
      const submissionTime = parseInt(lastSubmission);
      const now = Date.now();
      const timeDiff = now - submissionTime;
      
      if (timeDiff < 180000) { // 3 minutes in milliseconds
        const remainingTime = Math.ceil((180000 - timeDiff) / 1000);
        setStatusMessage(`‚ùå Please wait ${remainingTime} seconds before submitting again.`);
        return;
      }
    }

    const q = query(collection(db, 'classes'), where('enrollmentCode', '==', enrollmentCode));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      setStatusMessage('‚ùå Class not found. Check the enrollment code.');
      return;
    }

    const classDoc = querySnapshot.docs[0];
    setClassId(classDoc.id);
    setClassData(classDoc.data());
    setStatusMessage('‚úÖ Class found. Now enter your student code and today\'s attendance code.');
  };

  // Step 2: Submit attendance
  const handleSubmitAttendance = async () => {
    setStatusMessage('');

    // Check for recent submission
    const lastSubmission = localStorage.getItem('lastAttendanceSubmission');
    if (lastSubmission) {
      const submissionTime = parseInt(lastSubmission);
      const now = Date.now();
      const timeDiff = now - submissionTime;
      
      if (timeDiff < 180000) { // 3 minutes in milliseconds
        const remainingTime = Math.ceil((180000 - timeDiff) / 1000);
        setStatusMessage(`‚ùå Please wait ${remainingTime} seconds before submitting again.`);
        return;
      }
    }

    if (!classId || !classData) {
      setStatusMessage('‚ùå Please join a class first.');
      return;
    }

    if (!studentCode.trim()) {
      setStatusMessage('‚ùå Please enter your student code');
      return;
    }

    // Check if attendance code is expired (15 minutes)
    const generatedTime = classData.attendanceCodeGeneratedAt;
    const now = Date.now();
    const timeDiff = now - generatedTime;

    if (classData.attendanceCode !== attendanceCode) {
      setStatusMessage('‚ùå Invalid attendance code.');
      return;
    }

    if (timeDiff > 15 * 60 * 1000) {
      setStatusMessage('‚ùå Attendance code has expired.');
      return;
    }

    try {
      await addDoc(collection(db, 'attendanceRecords'), {
        classId,
        studentCode,
        timestamp: Date.now(),
      });

      // Save submission time to localStorage
      localStorage.setItem('lastAttendanceSubmission', Date.now().toString());

      setShowSuccessModal(true);
      setCountdown(5);
      
      // Redirect to home page after 5 seconds
      setTimeout(() => {
        navigate('/');
      }, 5000);
    } catch (error) {
      setStatusMessage(`‚ùå Error: ${error.message}`);
    }
  };

  // Countdown effect
  useEffect(() => {
    let timer;
    if (showSuccessModal && countdown > 0) {
      timer = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [showSuccessModal, countdown]);

  const buttonStyle = {
    padding: '10px 20px',
    width: '100%',
    backgroundColor: '#4CAF50',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '1rem',
    fontWeight: '500',
    transition: 'all 0.3s ease',
    marginTop: '10px',
  };

  const buttonHoverStyle = {
    backgroundColor: '#45a049',
    transform: 'translateY(-2px)',
    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
  };

  return (
    <div style={{ 
      maxWidth: 400, 
      margin: '40px auto', 
      padding: '0 20px', 
      textAlign: 'center',
      width: '100%',
      boxSizing: 'border-box'
    }}>
      {showSuccessModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.9)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000,
          padding: '20px'
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: 'clamp(20px, 5vw, 40px)',
            borderRadius: '12px',
            maxWidth: '90%',
            width: '400px',
            textAlign: 'center'
          }}>
            <div style={{
              fontSize: 'clamp(2rem, 6vw, 3rem)',
              color: '#4CAF50',
              marginBottom: '20px'
            }}>
              ‚úÖ
            </div>
            <h2 style={{
              fontSize: 'clamp(1.5rem, 4vw, 2rem)',
              color: '#1e293b',
              marginBottom: '20px'
            }}>
              {translations[language].successTitle}
            </h2>
            <p style={{
              fontSize: 'clamp(1rem, 3vw, 1.2rem)',
              color: '#64748b',
              marginBottom: '10px'
            }}>
              {translations[language].redirecting} {countdown} {translations[language].seconds}
            </p>
            <div style={{
              width: '100%',
              height: '4px',
              backgroundColor: '#e2e8f0',
              borderRadius: '2px',
              overflow: 'hidden'
            }}>
              <div style={{
                width: `${(countdown / 5) * 100}%`,
                height: '100%',
                backgroundColor: '#4CAF50',
                transition: 'width 1s linear'
              }} />
            </div>
          </div>
        </div>
      )}

      <Link to="/" style={{ textDecoration: 'none' }}>
        <img 
          src={logo} 
          alt="Presenzo Logo" 
          style={{ 
            height: 'clamp(40px, 10vw, 60px)',
            cursor: 'pointer',
            transition: 'transform 0.2s ease',
            marginBottom: '0.5rem',
            maxWidth: '100%',
            height: 'auto'
          }} 
          onMouseOver={e => e.target.style.transform = 'scale(1.05)'} 
          onMouseOut={e => e.target.style.transform = 'scale(1)'}
        />
      </Link>

      <div style={{ 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        gap: '0.25rem',
        backgroundColor: 'white',
        padding: '0.25rem',
        borderRadius: '6px',
        boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
        marginBottom: '1rem'
      }}>
        <FaGlobe size={14} style={{ color: '#4a5568', marginRight: '0.5rem' }} />
        {['en', 'pt', 'es'].map((lang) => (
          <button
            key={lang}
            onClick={() => setLanguage(lang)}
            style={{
              padding: '0.25rem 0.75rem',
              border: 'none',
              background: language === lang ? '#3b82f6' : 'transparent',
              color: language === lang ? 'white' : '#4a5568',
              borderRadius: '4px',
              cursor: 'pointer',
              transition: 'all 0.2s ease',
              fontSize: '0.9rem'
            }}
          >
            {lang.toUpperCase()}
          </button>
        ))}
      </div>

      <h2 style={{ fontSize: 'clamp(1.5rem, 4vw, 2rem)', marginBottom: '1rem' }}>{translations[language].title}</h2>

      <div style={{ 
        marginBottom: '1rem',
        textAlign: 'left',
        fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
        color: '#1e293b',
        fontWeight: '500',
        display: 'flex',
        alignItems: 'center',
        gap: '8px'
      }}>
        {translations[language].step1}
        <div style={{ position: 'relative', display: 'inline-block' }}>
          <span 
            style={{ 
              cursor: 'help',
              color: '#718096'
            }}
            onMouseEnter={() => setShowEnrollmentTooltip(true)}
            onMouseLeave={() => setShowEnrollmentTooltip(false)}
          >
            <FaQuestionCircle size={14} />
          </span>
          {showEnrollmentTooltip && (
            <div style={{
              position: 'absolute',
              bottom: '100%',
              left: '50%',
              transform: 'translateX(-50%)',
              backgroundColor: 'white',
              padding: '12px',
              borderRadius: '8px',
              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
              width: '300px',
              zIndex: 1000,
              border: '1px solid #e2e8f0',
              fontSize: '0.9rem',
              color: '#4a5568',
              whiteSpace: 'pre-line',
              marginBottom: '8px'
            }}>
              {translations[language].enrollmentTooltip}
              <div style={{
                position: 'absolute',
                bottom: '-6px',
                left: '50%',
                transform: 'translateX(-50%) rotate(45deg)',
                width: '12px',
                height: '12px',
                backgroundColor: 'white',
                borderRight: '1px solid #e2e8f0',
                borderBottom: '1px solid #e2e8f0'
              }} />
            </div>
          )}
        </div>
      </div>
      <input
        type="tel"
        inputMode="numeric"
        pattern="[0-9]*"
        placeholder={translations[language].enrollmentPlaceholder}
        value={enrollmentCode}
        onChange={(e) => setEnrollmentCode(e.target.value.replace(/[^0-9]/g, '').toUpperCase())}
        style={{ 
          width: '100%', 
          padding: 'clamp(8px, 2vw, 12px)', 
          margin: '10px 0',
          fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
          boxSizing: 'border-box',
          border: '1px solid #e2e8f0',
          borderRadius: '6px',
          transition: 'border-color 0.2s ease'
        }}
      />
      <button 
        onClick={handleJoinClass} 
        style={{
          ...buttonStyle,
          padding: 'clamp(8px, 2vw, 12px)',
          fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
          marginTop: '1rem'
        }}
        onMouseOver={(e) => Object.assign(e.target.style, buttonHoverStyle)}
        onMouseOut={(e) => Object.assign(e.target.style, buttonStyle)}
      >
        {translations[language].joinClass}
      </button>

      {classData && (
        <>
          <div style={{ 
            marginTop: '2rem',
            marginBottom: '1rem',
            textAlign: 'left',
            fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
            color: '#1e293b',
            fontWeight: '500'
          }}>
            {translations[language].step2}
          </div>

          {/* Student Identifier Section */}
          <div style={{
            marginBottom: '1.5rem',
            padding: '15px',
            backgroundColor: '#f8fafc',
            borderRadius: '8px',
            border: '1px solid #e2e8f0'
          }}>
            <div style={{ 
              fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
              color: '#1e293b',
              fontWeight: '500',
              marginBottom: '8px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              {translations[language].studentName}
              <div style={{ position: 'relative', display: 'inline-block' }}>
                <span 
                  style={{ 
                    marginLeft: '0.5rem',
                    cursor: 'help',
                    color: '#718096'
                  }}
                  onMouseEnter={() => setShowTooltip(true)}
                  onMouseLeave={() => setShowTooltip(false)}
                >
                  <FaQuestionCircle size={14} />
                </span>
                {showTooltip && (
                  <div style={{
                    position: 'absolute',
                    bottom: '100%',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    backgroundColor: 'white',
                    padding: '12px',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
                    width: '300px',
                    zIndex: 1000,
                    border: '1px solid #e2e8f0',
                    fontSize: '0.9rem',
                    color: '#4a5568',
                    whiteSpace: 'pre-line',
                    marginBottom: '8px'
                  }}>
                    {translations[language].studentNameTooltip}
                    <div style={{
                      position: 'absolute',
                      bottom: '-6px',
                      left: '50%',
                      transform: 'translateX(-50%) rotate(45deg)',
                      width: '12px',
                      height: '12px',
                      backgroundColor: 'white',
                      borderRight: '1px solid #e2e8f0',
                      borderBottom: '1px solid #e2e8f0'
                    }} />
                  </div>
                )}
              </div>
            </div>
            <input
              type="text"
              placeholder={translations[language].studentPlaceholder}
              value={studentCode}
              onChange={(e) => setStudentCode(e.target.value)}
              style={{ 
                width: '100%', 
                padding: 'clamp(8px, 2vw, 12px)', 
                margin: '10px 0',
                fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
                borderColor: !studentCode.trim() ? '#ffcdd2' : '#e2e8f0',
                borderWidth: '1px',
                borderStyle: 'solid',
                borderRadius: '6px',
                outline: 'none',
                boxSizing: 'border-box',
                transition: 'border-color 0.2s ease'
              }}
              required
            />
          </div>

          {/* Attendance Code Section */}
          <div style={{
            marginBottom: '1.5rem',
            padding: '15px',
            backgroundColor: '#f8fafc',
            borderRadius: '8px',
            border: '1px solid #e2e8f0'
          }}>
            <div style={{ 
              fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
              color: '#1e293b',
              fontWeight: '500',
              marginBottom: '8px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              {translations[language].attendanceCode}
              <div style={{ position: 'relative', display: 'inline-block' }}>
                <span 
                  style={{ 
                    cursor: 'help',
                    color: '#718096'
                  }}
                  onMouseEnter={() => setShowAttendanceTooltip(true)}
                  onMouseLeave={() => setShowAttendanceTooltip(false)}
                >
                  <FaQuestionCircle size={14} />
                </span>
                {showAttendanceTooltip && (
                  <div style={{
                    position: 'absolute',
                    bottom: '100%',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    backgroundColor: 'white',
                    padding: '12px',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
                    width: '300px',
                    zIndex: 1000,
                    border: '1px solid #e2e8f0',
                    fontSize: '0.9rem',
                    color: '#4a5568',
                    whiteSpace: 'pre-line',
                    marginBottom: '8px'
                  }}>
                    {translations[language].attendanceCodeTooltip}
                    <div style={{
                      position: 'absolute',
                      bottom: '-6px',
                      left: '50%',
                      transform: 'translateX(-50%) rotate(45deg)',
                      width: '12px',
                      height: '12px',
                      backgroundColor: 'white',
                      borderRight: '1px solid #e2e8f0',
                      borderBottom: '1px solid #e2e8f0'
                    }} />
                  </div>
                )}
              </div>
            </div>
            <input
              type="tel"
              inputMode="numeric"
              pattern="[0-9]{3}"
              maxLength="3"
              placeholder={translations[language].attendancePlaceholder}
              value={attendanceCode}
              onChange={(e) => {
                const value = e.target.value.replace(/[^0-9]/g, '').slice(0, 3);
                setAttendanceCode(value);
              }}
              style={{ 
                width: '100%', 
                padding: 'clamp(8px, 2vw, 12px)', 
                margin: '10px 0',
                fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
                border: '1px solid #e2e8f0',
                borderRadius: '6px',
                boxSizing: 'border-box',
                transition: 'border-color 0.2s ease'
              }}
            />
          </div>

          <button 
            onClick={handleSubmitAttendance} 
            style={{
              ...buttonStyle,
              padding: 'clamp(8px, 2vw, 12px)',
              fontSize: 'clamp(0.9rem, 2.5vw, 1rem)',
              marginTop: '1rem'
            }}
            onMouseOver={(e) => Object.assign(e.target.style, buttonHoverStyle)}
            onMouseOut={(e) => Object.assign(e.target.style, buttonStyle)}
          >
            {translations[language].submitAttendance}
          </button>
        </>
      )}

      {statusMessage && !showSuccessModal && (
        <p style={{ 
          marginTop: 20, 
          padding: 'clamp(8px, 2vw, 12px)',
          backgroundColor: statusMessage.includes('‚úÖ') ? '#e8f5e9' : '#ffebee',
          borderRadius: '4px',
          color: statusMessage.includes('‚úÖ') ? '#2e7d32' : '#c62828',
          fontSize: 'clamp(0.85rem, 2.5vw, 0.9rem)'
        }}>
          {statusMessage}
        </p>
      )}
    </div>
  );
}

export default Student;
